#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

/**
 * Setup wizard for LinkedIn Bot
 */
async function setupWizard() {
  console.log(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ        LinkedIn Bot Setup Wizard               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

This wizard will help you configure your LinkedIn automation bot.
Please have the following information ready:

‚úÖ LinkedIn email and password
‚úÖ Google Gemini API key
‚úÖ Gmail address and app password
‚úÖ Job search preferences

Let's get started!
`);

  const config = {};

  // LinkedIn Configuration
  console.log('\nüìß LinkedIn Configuration:');
  config.LINKEDIN_EMAIL = await question('Enter your LinkedIn email: ');
  config.LINKEDIN_PASSWORD = await question('Enter your LinkedIn password: ');

  // Gemini AI Configuration
  console.log('\nü§ñ Gemini AI Configuration:');
  console.log('Get your API key from: https://makersuite.google.com/app/apikey');
  config.GEMINI_API_KEY = await question('Enter your Gemini API key: ');

  // Gmail Configuration
  console.log('\nüì¨ Gmail Configuration:');
  console.log('You need to enable 2FA and generate an app password.');
  console.log('Guide: https://support.google.com/accounts/answer/185833');
  config.GMAIL_EMAIL = await question('Enter your Gmail address: ');
  config.GMAIL_APP_PASSWORD = await question('Enter your Gmail app password: ');

  // Job Search Configuration
  console.log('\nüîç Job Search Configuration:');
  const defaultKeywords = 'software developer hiring,react native developer hiring,backend developer hiring,frontend developer hiring,react developer hiring';
  const keywordsInput = await question(`Enter job search keywords (press Enter for default):\nDefault: ${defaultKeywords}\nYour keywords: `);
  config.JOB_KEYWORDS = keywordsInput.trim() || defaultKeywords;

  // Bot Behavior Configuration
  console.log('\n‚öôÔ∏è Bot Behavior Configuration:');
  const maxResults = await question('Maximum search results per keyword (default: 10): ');
  config.MAX_SEARCH_RESULTS = maxResults || '10';

  const maxEmails = await question('Maximum emails to send per day (default: 10): ');
  config.MAX_APPLICATIONS_PER_DAY = maxEmails || '10';

  const headless = await question('Run browser in headless mode? (y/n, default: n): ');
  config.HEADLESS_MODE = headless.toLowerCase().startsWith('y') ? 'true' : 'false';

  // Optional Configuration
  console.log('\nüîß Optional Configuration:');
  const senderName = await question('Your name for email signatures (optional): ');
  if (senderName.trim()) {
    config.SENDER_NAME = senderName.trim();
  }

  // Create .env file
  await createEnvFile(config);

  // Create necessary directories
  await createDirectories();

  console.log(`
‚úÖ Setup completed successfully!

Next steps:
1. Review your .env file and make any adjustments
2. Test your configuration: npm run test
3. Start the bot: npm start

Important Notes:
‚ö†Ô∏è  Always test with a small number of applications first
‚ö†Ô∏è  Monitor your LinkedIn account for any security warnings
‚ö†Ô∏è  Use reasonable delays to avoid detection
‚ö†Ô∏è  Review and comply with LinkedIn's Terms of Service

Happy job hunting! üöÄ
`);

  rl.close();
}

/**
 * Create .env file with user configuration
 */
async function createEnvFile(config) {
  const envContent = `# LinkedIn Bot Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# LinkedIn Credentials
LINKEDIN_EMAIL=${config.LINKEDIN_EMAIL}
LINKEDIN_PASSWORD=${config.LINKEDIN_PASSWORD}

# Gemini AI Configuration
GEMINI_API_KEY=${config.GEMINI_API_KEY}

# Email Configuration
GMAIL_EMAIL=${config.GMAIL_EMAIL}
GMAIL_APP_PASSWORD=${config.GMAIL_APP_PASSWORD}

# Bot Configuration
MAX_SEARCH_RESULTS=${config.MAX_SEARCH_RESULTS}
DELAY_MIN_MS=2000
DELAY_MAX_MS=5000
HUMAN_TYPING_DELAY=100

# Job Search Keywords (comma separated)
JOB_KEYWORDS=${config.JOB_KEYWORDS}

# Browser Configuration
HEADLESS_MODE=${config.HEADLESS_MODE}
VIEWPORT_WIDTH=1366
VIEWPORT_HEIGHT=768

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=logs/linkedin-bot.log

# Safety Settings
MAX_APPLICATIONS_PER_DAY=${config.MAX_APPLICATIONS_PER_DAY}
COOLDOWN_BETWEEN_ACTIONS=3000

# Optional Settings
${config.SENDER_NAME ? `SENDER_NAME=${config.SENDER_NAME}` : '# SENDER_NAME=Your Name'}
`;

  await fs.writeFile('.env', envContent);
  console.log('\n‚úÖ Created .env file with your configuration');
}

/**
 * Create necessary directories
 */
async function createDirectories() {
  const directories = [
    'logs',
    'screenshots', 
    'reports',
    'data'
  ];

  for (const dir of directories) {
    await fs.ensureDir(dir);
  }

  console.log('‚úÖ Created necessary directories');
}

/**
 * Test configuration
 */
async function testConfiguration() {
  console.log('\nüß™ Testing configuration...');
  
  try {
    // Test if .env exists
    if (!(await fs.pathExists('.env'))) {
      console.log('‚ùå .env file not found. Please run setup first.');
      return false;
    }

    // Load environment variables
    require('dotenv').config();

    // Test required variables
    const required = [
      'LINKEDIN_EMAIL',
      'LINKEDIN_PASSWORD',
      'GEMINI_API_KEY',
      'GMAIL_EMAIL',
      'GMAIL_APP_PASSWORD'
    ];

    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      console.log('‚ùå Missing required configuration:', missing.join(', '));
      return false;
    }

    console.log('‚úÖ Configuration looks good!');
    
    // Test Gemini API (optional)
    const testGemini = await question('Test Gemini API connection? (y/n): ');
    if (testGemini.toLowerCase().startsWith('y')) {
      const { GoogleGenerativeAI } = require('@google/generative-ai');
      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      
      try {
        const result = await model.generateContent('Say "Gemini API working!"');
        const response = result.response.text();
        console.log('‚úÖ Gemini API test successful:', response);
      } catch (error) {
        console.log('‚ùå Gemini API test failed:', error.message);
      }
    }

    return true;
  } catch (error) {
    console.log('‚ùå Configuration test failed:', error.message);
    return false;
  }
}

/**
 * Main setup function
 */
async function main() {
  const command = process.argv[2];
  
  try {
    switch (command) {
      case 'test':
        await testConfiguration();
        break;
      case 'directories':
        await createDirectories();
        console.log('‚úÖ Directories created');
        break;
      default:
        await setupWizard();
        break;
    }
  } catch (error) {
    console.error('Setup failed:', error);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Run setup if called directly
if (require.main === module) {
  main();
}

module.exports = { setupWizard, createEnvFile, createDirectories, testConfiguration }; 